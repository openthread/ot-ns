# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import visualize_grpc_pb2 as visualize__grpc__pb2


class VisualizeGrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Visualize = channel.unary_stream(
                '/visualize_grpc_pb.VisualizeGrpcService/Visualize',
                request_serializer=visualize__grpc__pb2.VisualizeRequest.SerializeToString,
                response_deserializer=visualize__grpc__pb2.VisualizeEvent.FromString,
                )
        self.Command = channel.unary_unary(
                '/visualize_grpc_pb.VisualizeGrpcService/Command',
                request_serializer=visualize__grpc__pb2.CommandRequest.SerializeToString,
                response_deserializer=visualize__grpc__pb2.CommandResponse.FromString,
                )


class VisualizeGrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Visualize(self, request, context):
        """rpc Echo (EchoRequest) returns (EchoResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VisualizeGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Visualize': grpc.unary_stream_rpc_method_handler(
                    servicer.Visualize,
                    request_deserializer=visualize__grpc__pb2.VisualizeRequest.FromString,
                    response_serializer=visualize__grpc__pb2.VisualizeEvent.SerializeToString,
            ),
            'Command': grpc.unary_unary_rpc_method_handler(
                    servicer.Command,
                    request_deserializer=visualize__grpc__pb2.CommandRequest.FromString,
                    response_serializer=visualize__grpc__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'visualize_grpc_pb.VisualizeGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VisualizeGrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Visualize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/visualize_grpc_pb.VisualizeGrpcService/Visualize',
            visualize__grpc__pb2.VisualizeRequest.SerializeToString,
            visualize__grpc__pb2.VisualizeEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/visualize_grpc_pb.VisualizeGrpcService/Command',
            visualize__grpc__pb2.CommandRequest.SerializeToString,
            visualize__grpc__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
